# -*- coding: utf-8 -*-
"""SONAR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o_GnD2jswE1tilUhC8Key9VaHxucAtN7

Importing the dependecies
"""

import numpy as np # for arrays
import pandas as pd # for conv
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Data Processing"""

#loading the data to the pandas dataset
sonar_data = pd.read_csv("/sonar.csv", header = None)

sonar_data.head() # head is a function which brings first 5 row of the data set

#number of rows and columns
sonar_data.shape

sonar_data.describe() # describe statistical measures of data
# count - The number of not-empty values.
# mean - The average (mean) value.
# std - The standard deviation.
# min - the minimum value.
# 25% - The 25% percentile*.
# 50% - The 50% percentile*.
# 75% - The 75% percentile*.
# max - the maximum value.

sonar_data[60].value_counts() #

"""M -> Mines
R -> Rock
"""

sonar_data.groupby(60).mean()

#seprating data and labels
X = sonar_data.drop(columns = 60, axis = 1)

Y = sonar_data[60]

print(X)
print(Y)

"""Training and test data

"""

X_train , X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.1, stratify = Y, random_state = 2)
# test size -> percent of data is considered to be test data
# stratify -> splits data into stratify manner
# random state ->

print(X.shape, X_train.shape, X_test.shape)

"""Model Training -> Logistic Regression

"""

model = LogisticRegression()

#traing the logistic regression model with training data
model.fit(X_train, Y_train)

"""Model Evaluation"""

#accuracy of training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print("Accuracy on training data", training_data_accuracy)

#accuracy of test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print("Accuracy on test data", test_data_accuracy)

"""Making a predictive system"""

input_data = (0.0519,0.0548,0.0842,0.0319,0.1158,0.0922,0.1027,0.0613,0.1465,0.2838,0.2802,0.3086,0.2657,0.3801,0.5626,0.4376,0.2617,0.1199,0.6676,0.9402,0.7832,0.5352,0.6809,0.9174,0.7613,0.822,0.8872,0.6091,0.2967,0.1103,0.1318,0.0624,0.099,0.4006,0.3666,0.105,0.1915,0.393,0.4288,0.2546,0.1151,0.2196,0.1879,0.1437,0.2146,0.236,0.1125,0.0254,0.0285,0.0178,0.0052,0.0081,0.012,0.0045,0.0121,0.0097,0.0085,0.0047,0.0048,0.0053
)
#changing data type to a numpy array
input_data_as_np  = np.array(input_data)
'''
0.0519,0.0548,0.0842,0.0319,0.1158,0.0922,0.1027,0.0613,0.1465,0.2838,0.2802,0.3086,0.2657,0.3801,0.5626,0.4376,0.2617,0.1199,0.6676,0.9402,0.7832,0.5352,0.6809,0.9174,0.7613,0.822,0.8872,0.6091,0.2967,0.1103,0.1318,0.0624,0.099,0.4006,0.3666,0.105,0.1915,0.393,0.4288,0.2546,0.1151,0.2196,0.1879,0.1437,0.2146,0.236,0.1125,0.0254,0.0285,0.0178,0.0052,0.0081,0.012,0.0045,0.0121,0.0097,0.0085,0.0047,0.0048,0.0053
'''
#reshape the np arrayas we are predicting for one instance
input_data_reshaped  = input_data_as_np.reshape(1,-1)

prediction  = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0] == 'R'):
  print("The object is ROCK")
if(prediction[0] == 'M'):
  print("The object is MINE")

